{
    "collab_server" : "",
    "contents" : "\n\nrm(list = ls())\nlibrary(shiny)\nfields <- c(\"userName\", \"passwd\")\nLogged = FALSE;\n\n\nui1 <- function(){\n  tagList(\n    div(id = \"login\",\n        wellPanel(  titlePanel(\"Step 1: authorization\")),\n        wellPanel(textInput(\"userName\", \"Username\"),\n                  passwordInput(\"passwd\", \"Password\"),\n                  br(),actionButton(\"Login\", \"Log in\"))),\n    tags$style(type=\"text/css\", \"#login {font-size:10px;   text-align: left;position:absolute;top: 40%;left: 50%;margin-top: -100px;margin-left: -150px;}\")\n  )\n  \n}\n\nui2 <- function(){ \n  tagList(\n    div(id=\"genre\",\n        wellPanel(titlePanel(\"Step 2 :Genres\")),\n        sidebarLayout(sidebarPanel(checkboxGroupInput(\"genres\", \"Genres to choose:\", c(\"Drama\" = \"6\",\n                                                                                       \"Romance/Dating\" = \"7\",\n                                                                                       \"Comedy\" = \"1\",\n                                                                                       \"Family\"=\"10\",\n                                                                                       \"Action\"=\"4\",\n                                                                                       \"Celebrities\"=\"37\",\n                                                                                       \"History\"=\"45\",\n                                                                                       \"Thriller\"=\"26\",\n                                                                                       \"Music\"=\"32\",\n                                                                                       \"Fantasy\"=\"12\"\n        ))), \n        actionButton(inputId = \"button_in_genres\",label = \"Go\", icon = NULL)))\n  )\n}\n\n\n\nui3<-function(){fluidPage(\n  \n  titlePanel(\"Step 3 : Choice making\"),\n  \n  \n  \n  \n  wellPanel(\"\",\n            \n            selectInput(inputId = \"in0\", label = 'Choose doramas', \n                        choices = titles2, \n                        multiple = TRUE, selectize = TRUE),\n            uiOutput(\"variables\"),\n            wellPanel(\"\", actionButton(inputId = \"button_in_choice\",label = \"Go\", icon = NULL)),\n            \n            wellPanel(\"Personal info\",textOutput(\"dynamic\"))\n            \n            \n  ))}\n\n\n\nui4<- function(){fluidPage(\n  titlePanel(\"Step 4 :Stories\"),\n  fluidRow(\n    column(2, \n           sliderInput(\"History\", \"History\", min=0, max=10, value=5),\n           sliderInput(\"Cinderella\", \"Cinderella\", min=0, max=10, value=5),           \n           sliderInput(\"Investigation\", \"Investigation\", min=0, max=10, value=5),\n           sliderInput(\"School\", \"School\", min=0, max=10, value=5),\n           sliderInput(\"Gender\", \"Gender\", min=0, max=10, value=5)),\n    \n  column(2,\n             sliderInput(\"Super\", \"Supernatural\", min=0, max=10, value=5),\n             sliderInput(\"Pro\", \"Professional\", min=0, max=10, value=5),\n             sliderInput(\"Revenge\", \"Revenge\", min=0, max=10, value=5),\n             sliderInput(\"Friendship\", \"Friendship\", min=0, max=10, value=5),\n             sliderInput(\"Secrets\", \"Secrets of the past\", min=0, max=10, value=5)),\n\n  column(8,\n         DT::dataTableOutput(\"table\")\n  ))\n  \n  \n  \n  \n) }\n\n\nui = (htmlOutput(\"page\"))\n\n\n\nserver = (function(input, output,session) {\n  \n  library(recommenderlab)\n  library(dplyr)\n  library(readr)\n  library(registry)\n  \n\n  load('matrix_rates.RData')\n  load('recc_model.RData')\n  load('dramas_matrix.RData')\n  load('KR_genres.RData')\n  load('KR_rates.RData')\n  load('KR_rating_full.RData')\n  load('KR_shows.RData')\n  \n  \n  \n  saveData <- function(data) {\n    data <- as.data.frame(t(data))\n    if (exists(\"responses\")) {\n      responses <<- rbind(responses, data)\n    } else {\n      responses <<- data\n    }\n  }\n  \n  loadData <- function() {\n    if (exists(\"responses\")) {\n      responses\n    }\n  }\n  \n  \n  USER <- reactiveValues(Logged = Logged)\n  values<-reactiveValues()\n  observe({ \n    if (USER$Logged == FALSE) {\n      if (!is.null(input$Login)) {\n        if (input$Login > 0) {\n          Username <- isolate(input$userName)\n          Password <- isolate(input$passwd)\n          Id.username <- which(input$userName== Username)\n          Id.password <- which(input$passwd == Password)\n          if (length(Id.username) > 0 & length(Id.password) > 0) {\n            if (Id.username == Id.password) {\n              USER$Logged <- TRUE\n            } \n          }\n        } \n      }\n    }    \n  })\n  observe({\n    if (USER$Logged == FALSE) {\n      \n      output$page <- renderUI({\n        div(class=\"outer\",do.call(bootstrapPage,c(\"\",ui1())))\n      })\n    }\n    if (USER$Logged == TRUE) \n    {\n      \n      output$page <- renderUI({ ui2()\n        \n        \n      })\n      \n      formData <- reactive({\n        data <- sapply(fields, function(x) input[[x]])\n        data\n      })\n      \n      observeEvent(input$button_in_genres,\n                   {\n                     \n                     \n                     user_genres <-as.data.frame(matrix(nrow=1, ncol=5))  \n                     \n                     user_genres<- t(input$genres)\n                     # user_genres[is.na(user_genres)] <- 0 \n                     \n                     \n                     output$user_genres<-DT::renderDataTable(user_genres)\n                     \n                     \n                     \n                     dramas_matrix_work<-filter(dramas_matrix, is.element(genre_id,user_genres)==TRUE)\n                     \n                     \n                     first_page_dramas<-data.frame(dorama_id=stack(dramas_matrix_work[,2:6])[,1])\n                     \n                     \n                     \n                     first_page_dramas2 <-filter(KR_shows, is.element(dorama_id,first_page_dramas$dorama_id)==TRUE )\n                     \n                     #titles<<-as.data.frame(t(first_page_dramas2))\n                     #colnames(titles) <<- as.character(unlist(titles[2,]))\n                     \n                     titles2<<-as.list(first_page_dramas2$dorama_id)\n                     names(titles2)<<-as.character(first_page_dramas2$dorama_title)\n                     \n                     \n                     \n                     \n                     \n                     #output$first_page_dramas2<-DT::renderDataTable(first_page_dramas2)\n                     \n                     \n                 #    for (i in first_page_dramas2) {y<-split( first_page_dramas2, f=first_page_dramas2$dorama_title)\n                #     }\n                 #    \n                     \n                  #   for (i in seq(y))\n                   #  {  assign(paste(\"df\", i, sep = \"\"), y[[i]])}\n                     \n                     \n                     \n                     user_data<<-matrix(data=NA, ncol = ncol(matrix_rates))\n                     colnames(user_data)<<-colnames(matrix_rates)\n                     #user_data<<-t(user_data)\n                     \n                     \n                     output$variables <- renderUI({\n                       numVar <- length(as.integer(input$in0))\n                       \n                       lapply(input$in0, function(x) {\n                         list(radioButtons(paste0(\"dynamic\",x), first_page_dramas2$dorama_title[first_page_dramas2$dorama_id==x], \n                                           choices = c(\"Not watch\" = \"NA\",\n                                                       \"Terrible\" = \"1\", \n                                                       \"Awful\" = \"2\",\n                                                       \"Normal\" = \"3\", \n                                                       \"Excellent\" = \"4\",\n                                                       \"Perfect\" = \"5\"),\n                                           selected = \"one\")\n                                   )\n                         \n                         \n                         \n                       })\n                       \n                       \n                     })\n                     \n                     \n                     \n                     \n                     \n                     output$page<-renderUI({\n                       \n                       ui3()})}\n      )\n      \n      \n      \n      # output$userinfo<- renderDataTable({list(input$userName, input$genres)})\n      \n      \n      \n      observeEvent(input$button_in_genres,\n                   {\n                     \n                     saveData(formData())\n                     output$page<-renderUI({\n                       ui3()})\n                   })\n      \n      \n      output$responses <- DT::renderDataTable({\n        input$button_in_genres\n        loadData()\n      })     \n      \n      \n      observeEvent(input$button_in_choice,\n                  {\n                \n                 \n                    \n                 for (var in titles2){\n                  if(is.null(input[[paste0(\"dynamic\", var)]])==FALSE){\n                  user_data[colnames(user_data)==as.character(var)] <<- as.numeric(input[[paste0(\"dynamic\", var)]])\n                  }\n                 }\n                    \n                 \n                 \n                 \n        \n                 # for (x in titles2){\n                  #  if (input$paste0(\"dynamic\",x) != \"\"){\n                   # user_data[colnames(user_data)==as.character(x)]=input$paste0(\"dynamic\",x)}\n                     \n                  # }\n                     \n                   \n                   #\n                   #%   for (i in ncol(titles)){\n                   #%  user_data[rownames(user_data)==i]<-output$paste(\"dynamic\",i, sep = \"\")\n                   #%  }\n                   \n                   \n                   #user vector (doramas)\n                   \n                   \n                   # user_data<-t(user_data)\n                  #user_data<- sapply(user_data, as.numeric)\n                  user_data<-as(user_data,\"realRatingMatrix\")\n                  \n                  recc_predicted <- predict(object = recc_model, newdata = user_data, n = 600)\n                  recc_user_1 <- recc_predicted@items[[1]]\n                  recc_user_ratings<-recc_predicted@ratings[[1]]\n                  \n                  dorama_id<- sapply( recc_predicted@itemLabels[recc_user_1], as.integer)\n                  dorama_ids<-cbind(dorama_id, data.frame(rating=recc_user_ratings))\n                  \n                  KR_rating_full$id=as.numeric(rownames(KR_rating_full))\n                  \n                  dramas=inner_join(dorama_ids, KR_rating_full, by='dorama_id') \n                  dramas<-dramas[order(dramas$rating, decreasing = TRUE),]\n                  \n                # dramas2<-select(dramas, dorama_title, dorama_myshows)\n                  \n                  filter_dramas <- reactive({\n                    \n                    school <- as.numeric(input$School)\n                    history <- as.numeric(input$History)\n                    gender <- as.numeric(input$Gender)\n                    super <- as.numeric(input$Super)\n                    pro <- as.numeric(input$Pro)\n                    investigation <- as.numeric(input$Investigation)\n                    cinderella <- as.numeric(input$Cinderella)\n                    revenge <- as.numeric(input$Revenge)\n                    friendship <- as.numeric(input$Friendship)\n                    secrets <- as.numeric(input$Secrets)\n                    \n                    dramas2 <<- dramas %>%\n                      filter(\n                        School <= school+4,\n                        School >= school-4,\n                        History <= history+4, \n                        History >= history-4,\n                        Gender <= gender+4,\n                        Gender >= gender-4,\n                        Super <= super+4,\n                        Super >= super-4,\n                        Pro <= pro+4,\n                        Pro >= pro-4,\n                        Investigation <= investigation+4,\n                        Investigation >= investigation-4,\n                        Cinderella <= cinderella+4,\n                        Cinderella >= cinderella-4,\n                        Revenge <= revenge+4,\n                        Revenge >= revenge-4,\n                        Friendship <= friendship+4,\n                        Friendship >= friendship-4,\n                        Secrets <= secrets+4,\n                        Secrets >= secrets-4\n                      ) \n\n                    \n                  \n                     dramas2<<-select(dramas2, round(rating,2), dorama_title, dorama_myshows, doramatv)\n                    \n                    \n                  })\n                  \n                  output$table<-DT::renderDataTable({ filter_dramas() })\n                  \n                  output$page<-renderUI({ui4()})\n                   \n                   })\n      \n      print(ui)\n      \n      \n    }\n  })\n  \n  \n})\nshinyApp(ui = ui, server = server)\n#runApp(list(ui = ui, server = server))",
    "created" : 1495849431956.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "200750651",
    "id" : "C5C70F54",
    "lastKnownWriteTime" : 1497127493,
    "last_content_update" : 1497127493830,
    "path" : "~/dorama_project/application/app.R",
    "project_path" : "application/app.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}